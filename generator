#!/usr/bin/env python

"""Video Thumbnail Generator

Usage:
  ./generator <video> <interval> <width> <height> <columns> <output>
  ./generator (-h | --help)
  ./generator --version

Options:
  -h --help     Show this screen.
  --version     Show version.
  <video>         Video filepath.
  <interval>      Interval em seconds between frames.
  <width>         Width of each thumbnail.
  <height>        Height of each thumbnail.
  <columns>       Total number of thumbnails per line.
  <output>        Output.
"""

from docopt import docopt
from moviepy.editor import VideoFileClip
from PIL import Image
from click import progressbar
import glob, os, random, shutil, math, tempfile


TMP_FRAMES_PATH = tempfile.mkstemp()[1]

def generate_video_thumbnail(args):
    videoFileClip = VideoFileClip(args['<video>'])
    interval = int(args['<interval>'])
    size = (int(args['<width>']), int(args['<height>']))
    outputPrefix = get_output_prefix()
    generate_frames(videoFileClip, interval, outputPrefix, size)

    columns = int(args['<columns>'])
    output = args['<output>']
    generate_sprite_from_frames(outputPrefix, columns, size, output)

def generate_frames(videoFileClip, interval, outputPrefix, size):
    frameCount = 0
    with progressbar(range(0, int(videoFileClip.duration), interval)) as items:
        for i in items:
            extract_frame(videoFileClip, i, outputPrefix, size, frameCount)
            frameCount += 1

def extract_frame(videoFileClip, moment, outputPrefix, size, frameCount):
    output = outputPrefix + ("%05d.png" % frameCount)
    videoFileClip.save_frame(output, t=int(moment))
    resize_frame(output, size)

def resize_frame(filename, size):
    image = Image.open(filename)
    image = image.resize(size, Image.ANTIALIAS)
    image.save(filename)

def generate_sprite_from_frames(framesPath, columns, size, output):
    framesMap = sorted(glob.glob(framesPath + "*.png"))
    images = [Image.open(filename) for filename in framesMap]
    masterWidth = size[0] * columns
    masterHeight = size[1] * int(math.ceil(float(len(images)) / columns))
    finalImage = Image.new(mode='RGBA', size=(masterWidth, masterHeight), color=(0,0,0,0))
    merge_frames(images, finalImage, columns, size, output)

def merge_frames(images, finalImage, columns, size, output):
    line, column = 0, 0
    for image in images:
        locationX = size[0] * column
        locationY = size[1] * line
        finalImage.paste(image, (locationX, locationY))
        column += 1
        if column == columns:
            line += 1
            column = 0

    finalImage.save(output, transparency=0)
    shutil.rmtree(TMP_FRAMES_PATH, ignore_errors=True)

def get_output_prefix():
    if not os.path.exists(TMP_FRAMES_PATH):
        os.makedirs(TMP_FRAMES_PATH)
    return TMP_FRAMES_PATH + ("%032x_" % random.getrandbits(128))

if __name__ == "__main__":
    arguments = docopt(__doc__, version='0.0.2')
    generate_video_thumbnail(arguments)

